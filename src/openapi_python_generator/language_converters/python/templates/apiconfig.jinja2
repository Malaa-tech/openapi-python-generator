import httpx
from pydantic import BaseModel
from typing import Optional, Any, Union
from httpx import Response

class UIErrorMessage(BaseModel):
    en: str
    ar: str

class ErrorResponseDetails(BaseModel):
    code: str
    message: str
    ui_error_message: UIErrorMessage
    context: Optional[dict] = None


class APIConfig(BaseModel):
    client_id: Optional[str]
    client_secret: Optional[str]
    timeout: Any = httpx.Timeout(connect=5, read=15 * 60, write=5, pool=5)
    base_path: Optional[str] = {% if servers|length > 0 %} '{{ servers[0].url }}' {% else %} 'NO SERVER' {% endif %}
    verify: Union[bool, str] = False


class HTTPException(Exception):
    def __init__(self, response : Optional[Response] = None, error: Optional[Any]=None):

        try:
            self.details = ErrorResponseDetails(**response.json().get("detail")) if response is not None else ErrorResponseDetails(** error.details.dict())

        except Exception as e:
            self.details = response.text

        if response is not None:
            self.status_code = response.status_code
        elif hasattr(error, "status_code"):
            self.status_code = error.status_code
            self.http_code = error.status_code

        def __call__(self, *args):
            self.__class__(*(self.args + args))

        def __str__(self):
            return ": ".join(self.args)
